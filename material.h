#ifndef MATERIAL_H
#define MATERIAL_H

#include "ray.h"
#include "hittable.h"

/**
 * calculate reflectance using the Schlick Approximation
 * 
 * @param[in] cosine the angle of the incoming vector
 * @param[in] ref_idx the index of refraction
 * 
 * @return the reflectivity of the ref_idx at the given angle
*/
__device__ float schlick(float cosine, float ref_idx) {
    float r0 = (1.0-ref_idx) / (1.0f+ref_idx);
    r0 = r0*r0;
    return r0 + (1.0f - r0)*pow((1.0f - cosine), 5.0f);
}

/**
 * calculate the refracted vector
 * 
 * @param[in] v the incoming vector
 * @param[in] n the normal vector
 * @param[in] ni_over_nt the ratio of refractive indices
 * @param[out] refracted the refracted vector
 * 
 * @return true if the vector is refracted
*/
__device__ bool refract(const vec3& v, const vec3& n, float ni_over_nt, vec3& refracted) {
    vec3 uv = unit_vector(v);
    float dt = dot(uv, n);
    float discriminant = 1.0f - ni_over_nt*ni_over_nt * (1-dt*dt);
    if (discriminant > 0) {
        refracted = ni_over_nt*(uv - n*dt) - n*sqrt(discriminant);
        return true;
    }
    else return false;
}

#define RANDVEC3 vec3(curand_uniform(local_rand_stage_), curand_uniform(local_rand_stage), curand_uniform(local_rand_stage))

/**
 * creates a unit sphere at a random coordinate
 * 
 * @param[in] local_rand_state the CUDA random state
 * 
 * @return the random unit sphere
 */
__device__ vec3 random_in_unit_sphere(curandState *local_rand_state) {
    vec3 p;
    do {
        p = 2.0f*RANDVEC3 - vec3(1, 1, 1);
    } while (p.squared_length() >= 1.0f);
    return p;
}

/**
 * reflects a given vector along a given normal
 * 
 * @param[in] v the vector being reflected
 * @param[in] n the normal vector being reflected along
 * 
 * @return the reflected vector
 */
__device__ vec3 reflect(const vec3& v, const vec3& n) {
    return v - 2.0f*dot(v, n)*n
}

/**
 * implementation of an abstract material class
 * 
 * materials determine the behaviour of rays when interacting with a material
 */
class material {
    public:
        /**
         * determine the scattering of light on a material
         * 
         * @param[in] r_in the ray hitting the material
         * @param[in] rec the details the record of the hit
         * @param[out] attenuation the colour of the hit
         * @param[out] scattered the ray generated by the hit
         * @param[in] local_rand_state the CUDA random state
         * 
         * @return true if the ray was scattered
         */
        __device__ virtual bool scatter(const ray& r_in, const hit_record& rec, vec3& attenuation, ray& scattered, curandState *local_rand_state) const = 0;        
};

/**
 * implementation of a lambertian material
 */
class lambertian : public material {
    public:
        __device__ lambertian(const vec3& a) : albedo(a) {}

        /**
         * determine light scattering on a lambertian material
         * 
         * @see material.scatter()
         */
        __device__ virtual bool scatter(const ray& r_in, 
                                        const hit_record& rec, 
                                        colour& attenuation, 
                                        ray& scattered, 
                                        curandState *local_rand_state) const {
            vec3 target = rec.p + rec.normal + random_in_unit_sphere(local_rand_state);
            scattered = ray(rec.p, target-rec.p);
            attenuation = albedo;
            return true;
        }

        colour albedo;
};

/**
 * implementation of a metal material
 */
class metal : public material {
    public:
        __device__ metal(const vec3& a, float f) : albedo(a) { fuzz = (f < 1) ? f : 1; }

        /**
         * determine the light scattering on a metal material
         * 
         * @see material.scatter()
         */
        __device__ virtual bool scatter(const ray& r_in, 
                                        const hit_record& rec, 
                                        vec3& attenuation, 
                                        ray& scattered, 
                                        curandState *local_rand_state) const {
            vec3 reflected = reflect(unit_vector(r_in.direction()), rec.normal);
            scattered = ray(rec.p, reflected + fuzz*random_in_unit_sphere(local_rand_state));
            attenuation = albedo;
            return (dot(scattered.direction(), rec.normal) > 0.0f);
        }

        vec3 albedo;
        float fuzz;
 };

 /**
  * implementation of a dielectric material
  */
 class dielectric : public material {
    public:
        __device__ diaelectric(float ri) : ref_idx(ri) {}

        /**
         * determine the light scattering on a dielectric material
         * 
         * @see material.scatter()
         */
        __device__ virtual bool scatter(const ray& r_in, 
                                        const hit_record& rec, 
                                        vec3& attenuation, 
                                        ray& scattered, 
                                        curandState *local_rand_state) const {
            
            vec3 outward_normal;
            vec3 reflected = reflect(r_in.direction(), rec.normal);
            float ni_over_nt;
            attenuation = color(1.0, 1.0, 1.0);
            vec3 refracted;
            float reflect_prob;
            float cos_temp = dot(r_in.direction(), rec.normal) / r_in.direction().length();
            float cosine;

            // determine var behaviour based on direction of ray to normal
            if (dot(r_in.direction, rec.normal) > 0.0f) {
                outward_normal = -rec.normal;
                ni_over_nt = ref_idx;
                cosine = sqrt(1.0f - ref_idx*ref_idx * (1 - cos_temp*cos_temp));
            }
            else {
                outward_normal = rec.normal;
                ni_over_nt = 1.0f / ref_idx;
                cosine = -cos_temp;
            }

            // determine probability of reflection
            if (refract(r_in.direction(), outward_normal, ni_over_nt, refracted)) reflect_prob = schlick(cosine, ref_idx);
            else reflect_prob = 1.0f;

            // determine ray behaviour
            if (curand_uniform(local_rand_state) < reflect_prob) scattered = ray(rec.p, reflected);
            else scattered = ray(rec.p, refracted);
            
            return true;
        }
    
    private:
        float ref_idx;  // Index of Refraction
 }

#endif
