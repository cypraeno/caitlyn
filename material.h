#ifndef MATERIAL_H
#define MATERIAL_H

#include "ray.h"
#include "hittable.h"

#define RANDVEC3 vec3(curand_uniform(local_rand_stage_), curand_uniform(local_rand_stage), curand_uniform(local_rand_stage))

/**
 * creates a unit sphere at a random coordinate
 * 
 * @param[in] local_rand_state the CUDA random state
 * 
 * @return the random unit sphere
 */
__device__ vec3 random_in_unit_sphere(curandState *local_rand_state) {
    vec3 p;
    do {
        p = 2.0f*RANDVEC3 - vec3(1, 1, 1);
    } while (p.squared_length() >= 1.0f);
    return p;
}

/**
 * reflects a given vector along a given normal
 * 
 * @param[in] v the vector being reflected
 * @param[in] n the normal vector being reflected along
 * 
 * @return the reflected vector
 */
__device__ vec3 reflect(const vec3& v, const vec3& n) {
    return v - 2.0f*dot(v, n)*n
}

/**
 * implementation of an abstract material class
 * 
 * materials determine the behaviour of rays when interacting with a material
 */
class material {
    public:
        /**
         * determine the scattering of light on a material
         * 
         * @param[in] r_in the ray hitting the material
         * @param[in] rec the details the record of the hit
         * @param[out] attenuation the colour of the hit
         * @param[out] scattered the ray generated by the hit
         * @param[in] local_rand_state the CUDA random state
         * 
         * @return true if the ray was scattered
         */
        __device__ virtual bool scatter(const ray& r_in, const hit_record& rec, vec3& attenuation, ray& scattered, curandState *local_rand_state) const = 0;        
};

/**
 * implementation of a lambertian material
 */
class lambertian : public material {
    public:
        __device__ lambertian(const vec3& a) : albedo(a) {}

        /**
         * determine light scattering on a lambertian material
         * 
         * @see material.scatter()
         */
        __device__ virtual bool scatter(const ray& r_in, const hit_record& rec, colour& attenuation, ray& scattered, curandState *local_rand_state) const {
            vec3 target = rec.p + rec.normal + random_in_unit_sphere(local_rand_state);
            scattered = ray(rec.p, target-rec.p);
            attenuation = albedo;
            return true;
        }

        colour albedo;
};

/**
 * implementation of a metal material
 */
class metal : public material {
    public:
        __device__ metal(const vec3& a, float f) : albedo(a) { fuzz = (f < 1) ? f : 1; }

        /**
         * determine the light scattering on a metal material
         * 
         * @see material.scatter()
         */
        __device__ virtual bool scatter(const ray& r_in, const hit_record& rec, vec3& attenuation, ray& scattered, curandState *local_rand_state) const {
            vec3 reflected = reflect(unit_vector(r_in.direction()), rec.normal);
            scattered = ray(rec.p, reflected + fuzz*random_in_unit_sphere(local_rand_state));
            attenuation = albedo;
            return (dot(scattered.direction(), rec.normal) > 0.0f);
        }

        vec3 albedo;
        float fuzz;
 };

#endif